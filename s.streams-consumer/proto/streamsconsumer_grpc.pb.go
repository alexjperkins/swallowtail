// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package streamsconsumerproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamsconsumerClient is the client API for Streamsconsumer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamsconsumerClient interface {
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Streamsconsumer_SubscribeClient, error)
}

type streamsconsumerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamsconsumerClient(cc grpc.ClientConnInterface) StreamsconsumerClient {
	return &streamsconsumerClient{cc}
}

func (c *streamsconsumerClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Streamsconsumer_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Streamsconsumer_ServiceDesc.Streams[0], "/streamsconsumer/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamsconsumerSubscribeClient{stream}
	return x, nil
}

type Streamsconsumer_SubscribeClient interface {
	Send(*Command) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type streamsconsumerSubscribeClient struct {
	grpc.ClientStream
}

func (x *streamsconsumerSubscribeClient) Send(m *Command) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamsconsumerSubscribeClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamsconsumerServer is the server API for Streamsconsumer service.
// All implementations must embed UnimplementedStreamsconsumerServer
// for forward compatibility
type StreamsconsumerServer interface {
	Subscribe(Streamsconsumer_SubscribeServer) error
	mustEmbedUnimplementedStreamsconsumerServer()
}

// UnimplementedStreamsconsumerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamsconsumerServer struct {
}

func (UnimplementedStreamsconsumerServer) Subscribe(Streamsconsumer_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamsconsumerServer) mustEmbedUnimplementedStreamsconsumerServer() {}

// UnsafeStreamsconsumerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamsconsumerServer will
// result in compilation errors.
type UnsafeStreamsconsumerServer interface {
	mustEmbedUnimplementedStreamsconsumerServer()
}

func RegisterStreamsconsumerServer(s grpc.ServiceRegistrar, srv StreamsconsumerServer) {
	s.RegisterService(&Streamsconsumer_ServiceDesc, srv)
}

func _Streamsconsumer_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamsconsumerServer).Subscribe(&streamsconsumerSubscribeServer{stream})
}

type Streamsconsumer_SubscribeServer interface {
	Send(*Response) error
	Recv() (*Command, error)
	grpc.ServerStream
}

type streamsconsumerSubscribeServer struct {
	grpc.ServerStream
}

func (x *streamsconsumerSubscribeServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamsconsumerSubscribeServer) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Streamsconsumer_ServiceDesc is the grpc.ServiceDesc for Streamsconsumer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Streamsconsumer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamsconsumer",
	HandlerType: (*StreamsconsumerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Streamsconsumer_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "s.streams-consumer/proto/streamsconsumer.proto",
}
