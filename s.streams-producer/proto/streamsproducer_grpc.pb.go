// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package streamsproducerproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StreamsproducerClient is the client API for Streamsproducer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamsproducerClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
}

type streamsproducerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamsproducerClient(cc grpc.ClientConnInterface) StreamsproducerClient {
	return &streamsproducerClient{cc}
}

func (c *streamsproducerClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/streamsproducer/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamsproducerServer is the server API for Streamsproducer service.
// All implementations must embed UnimplementedStreamsproducerServer
// for forward compatibility
type StreamsproducerServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	mustEmbedUnimplementedStreamsproducerServer()
}

// UnimplementedStreamsproducerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamsproducerServer struct {
}

func (UnimplementedStreamsproducerServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedStreamsproducerServer) mustEmbedUnimplementedStreamsproducerServer() {}

// UnsafeStreamsproducerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamsproducerServer will
// result in compilation errors.
type UnsafeStreamsproducerServer interface {
	mustEmbedUnimplementedStreamsproducerServer()
}

func RegisterStreamsproducerServer(s grpc.ServiceRegistrar, srv StreamsproducerServer) {
	s.RegisterService(&Streamsproducer_ServiceDesc, srv)
}

func _Streamsproducer_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsproducerServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/streamsproducer/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsproducerServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Streamsproducer_ServiceDesc is the grpc.ServiceDesc for Streamsproducer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Streamsproducer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamsproducer",
	HandlerType: (*StreamsproducerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _Streamsproducer_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "s.streams-producer/proto/streamsproducer.proto",
}
